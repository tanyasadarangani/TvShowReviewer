<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
  <meta name="viewport" content="width=device-width">
  <link href="https://fonts.googleapis.com/css?family=Indie+Flower&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="stylesheets/style.css" />
    <title>VÃ©ritable Critique</title>
    <script>
;((window)=>{
	if (!window || !window.document) return;
	else var document = window.document;

	document.addEventListener("DOMContentLoaded", function(){
      	//with or without logged in user
		SEARCH.init();
      	//only with logged in user
      	if (user) {
            PROFILE.init();
            LIST.init();
          	DETAIL.init();
          	MODAL.init();
            DRAG.init();
        }
	});
/***********************************************************/

const USER = {};
USER.name = null;
USER.pic = null;
USER.lists = [];
USER.reviews = {};
USER.getListObject = function userGetListObject(){
	return {
		name: "Unnamed List",
		shows: []
	};
}
USER.getData = function userGetData(){
	return {
		name: USER.name,
		pic: USER.pic,
		lists: USER.lists,
		reviews: USER.reviews
	};
}
USER.update = function userUpdate(mustUpdateLists=true){
	//get data from HTML
	if (mustUpdateLists) USER.updateLists();
	//send updated user data to server
  	let data = USER.getData();
	console.log(data);
	fetch("user/update/" + user._id, {
    	method: "POST",
      	headers: {"Accept": "application/json", "Content-Type": "application/json"},
      	body: JSON.stringify(data)
    });
}
USER.updateLists = function userUpdateLists(){
	let lists = document.querySelectorAll("main ul:first-of-type ~ *");
	USER.lists = [];
	lists.forEach(el => {
		if (el.tagName.toLowerCase() === "h2"){
			let newList = USER.getListObject();
			if (el.textContent) newList.name = el.textContent;
			USER.lists.push(newList);
			return;
		}
		if (el.tagName.toLowerCase() === "ul"){
			let newList = USER.lists.pop();
			el.querySelectorAll("li").forEach(li => {
				let showId = li.querySelector("img").getAttribute("data-showid");
				newList.shows.push(showId);
			});
			USER.lists.push(newList);
			return;
		}
	});
}


const API = {};
API.search = function apiSearch(searchString, callback){
	fetch("https://api.tvmaze.com/search/shows?q=" + encodeURI(searchString)).then(res => res.json()).then(callback);
}
API.getSingle = function apiGetSingle(id, callback) {
	fetch("https://api.tvmaze.com/shows/" + encodeURI(id)).then(res => res.json()).then(callback);
}

const SEARCH = {};
SEARCH.input = null;
SEARCH.resultsBox = null;
SEARCH.debouncer = null;
SEARCH.init = function searchInit(){
	let input = document.querySelector("#search"),
		resultsBox = document.querySelector("#searchresults");
	input.addEventListener("keyup", SEARCH.handleKeyup);
	input.addEventListener("blur", SEARCH.handleBlur);
	input.focus();
	SEARCH.input = input;
	SEARCH.resultsBox = resultsBox;
	SEARCH.debouncer = null;
}
SEARCH.handleKeyup = function searchHandleKeyup(e){
	if (e.keyCode === 13){ //enter key; do search immediately
		SEARCH.do();
	}
	else { //if typing has stopped for 500ms, do search
		if (SEARCH.debouncer) window.clearTimeout(SEARCH.debouncer);
		SEARCH.debouncer = window.setTimeout(SEARCH.do, 500);
	}
}
SEARCH.handleBlur = function searchHandleBlur(){
	SEARCH.input.value = "";
}
SEARCH.do = function searchDo(){
	SEARCH.resultsBox.innerHTML = "";
	let searchString = SEARCH.input.value;
	API.search(searchString, SEARCH.populateResults);
}
SEARCH.populateResults = function searchPopulateResults(data){
	console.log(data);
    let html = "";
	data.forEach(datum => {
		if (!datum || !datum.show || !datum.show.image || !datum.show.image.medium) return;
		let src = datum.show.image.medium,
			showId = datum.show.id,
            showName = datum.show.name,
            img = `<li><img src="${src}" alt="${showName}" data-showId="${showId}" /></li>`;
         html += img;
    });
    SEARCH.resultsBox.innerHTML = html;
  	if (user){ //for logged-in users only
		DETAIL.addEvents(SEARCH.resultsBox);
		DRAG.addDraggableEvents(SEARCH.resultsBox.querySelectorAll("li"));
    }
}


const PROFILE = {};
PROFILE.pic = null;
PROFILE.init = function profileInit(){
	let button = document.querySelector("#profile");
	button.addEventListener("click", PROFILE.handleClick);
	PROFILE.pic = button.querySelector("img");
  	if (user){
    	USER.name = PROFILE.pic.getAttribute("alt");
      	USER.pic = PROFILE.pic.src;
    }
  	else PROFILE.update();
}
PROFILE.update = function profileUpdate(){
	PROFILE.pic.src = USER.pic || "https://pluspng.com/img-png/png-user-icon-circled-user-icon-2240.png";
	if (USER.name) PROFILE.pic.setAttribute("alt", USER.name + " Profile");
	else PROFILE.pic.setAttribute("alt", "User Profile");
}
PROFILE.handleClick = function profileHandleClick(e){
	let container = MODAL.getContainer(),
		nameInput = document.createElement("input"),
		picInput = document.createElement("input"),
		button = document.createElement("button");
	nameInput.setAttribute("placeholder", "Name");
	nameInput.value = USER.name || "";
	picInput.setAttribute("placeholder", "Image URL");
	picInput.value = USER.pic || "";
	[nameInput, picInput].forEach(input => {
      input.addEventListener("keyup", PROFILE.handleKeyup);
		//stops the modal window from closing
		input.addEventListener("click", e => e.stopPropagation());
	});
	button.textContent = "Save Profile";
	button.addEventListener("click", PROFILE.handleSaveClick);
	container.append(nameInput, picInput, button);
	MODAL.show();
	nameInput.focus();
}
PROFILE.handleKeyup = function profileHandleKeyup(e){
	//enter key?
	if (e.keyCode === 13){
		let button = e.currentTarget.nextElementSibling;
		if (button.tagName.toLowerCase() !== "button") button = button.nextElementSibling;
		button.click();
	}
}
PROFILE.handleSaveClick = function profileHandleSaveClick(e){
	let picInput = e.currentTarget.previousElementSibling,
		pic = picInput.value,
		name = picInput.previousElementSibling.value;
	USER.name = name;
	USER.pic = pic;
	PROFILE.update();
	USER.update(false);
}


const LIST = {};
LIST.init = function listInit(){
	document.querySelector("#addList").addEventListener("click", LIST.handleDrop);
  	//get API images for each show by showId
  	document.querySelectorAll("ul:not(:first-of-type) img").forEach(img => {
    	let showId = img.getAttribute("data-showId");
      	API.getSingle(showId, LIST.loadImage);
    });
}
LIST.loadImage = function listLoadImage(data){
	let img = document.querySelector(`img[data-showId="${data.id}"]`);
	img.src = data.image.medium;
  	img.alt = data.name;
}
LIST.handleDrop = function listHandleDrop(e, dragElement){
	let h2 = document.createElement("h2"),
		input = document.createElement("input"),
		button = document.createElement("input"),
		ul = document.createElement("ul"),
		main = document.querySelector("main");
	input.setAttribute("placeholder", "Unnamed List");
	button.setAttribute("type", "button");
	button.value = "Delete List";
	h2.appendChild(input);
	if (dragElement) ul.appendChild(dragElement);
	main.append(h2, button, ul);
	h2.addEventListener("click", LIST.handleClick);
	input.addEventListener("keyup", LIST.handleKeyup);
	input.addEventListener("blur", LIST.handleBlur);
	input.focus();
	button.addEventListener("click", LIST.handleDeleteClick);
	DRAG.addDroppableEvents(ul);
	USER.update();
}
LIST.handleDragover = function listHandleDragover(e){
	e.currentTarget.classList.add("dropping");
}
LIST.handleDragleave = function listHandleDragleave(e){
	e.currentTarget.classList.remove("dropping");
}
LIST.handleClick = function listHandleClick(e){
	if (e.currentTarget.textContent === "") return; //input already present
	let input = document.createElement("input");
	input.setAttribute("placeholder", "Unnamed List");
	input.value = e.currentTarget.textContent;
	e.currentTarget.innerHTML = "";
	e.currentTarget.appendChild(input);
	input.addEventListener("keyup", LIST.handleKeyup);
	input.addEventListener("blur", LIST.handleBlur);
	input.focus();
}
LIST.handleDeleteClick = function listHandleDeleteClick(e){
	e.stopPropagation();
	let h2 = e.currentTarget.previousElementSibling,
		ul = e.currentTarget.nextElementSibling;
	h2.outerHTML = "";
	ul.outerHTML = "";
	e.currentTarget.outerHTML = "";
	USER.update();
}
LIST.handleKeyup = function listHandleKeyup(e){
	//enter key?
	if (e.keyCode === 13) e.currentTarget.blur();
}
LIST.handleBlur = function listHandleBlur(e){
	if (!e.currentTarget.value) return; //no list name given
	e.currentTarget.parentElement.innerHTML = e.currentTarget.value;
	USER.update();
}


const DETAIL = {};
DETAIL.init = function detailInit(){
	document.querySelectorAll("ul:not(:first-of-type)").forEach(ul => {
    	DETAIL.addEvents(ul);
    });
}
DETAIL.addEvents = function detailAddEvents(container){
	container.querySelectorAll("li").forEach(li => {
		li.addEventListener("click", DETAIL.handleClick);
	});
}
DETAIL.handleClick = function detailHandleClick(e){
	let showId = e.target.getAttribute("data-showId");
	API.getSingle(showId, DETAIL.show);
}
DETAIL.show = function detailShow(data){
	console.log(data);
	let container = MODAL.getContainer(),
		html = "<article>";
	html += `<img src="${data.image.medium}" alt="${data.name}" />`;
	html += `<h3>${data.name}</h3>`;
	html += `<p>${data.summary}</p>`;
	html += `<h4>Your Review of ${data.name}</h4>`;
	html += "</article>";
	container.innerHTML = html;
	REVIEW.get(container, data.id);
	MODAL.show();
}


const REVIEW = {};
REVIEW.get = function reviewGet(container, showId){
	//if there's already a review
	let review = USER.reviews["_" + showId];
	if (review){
		let p = document.createElement("p");
		p.textContent = review;
		container.append(p);
		p.addEventListener("click", e => {
			REVIEW.handleEditClick(e, showId);
		});
		return;
	}
	//no review yet
	let button = document.createElement("button");
	button.textContent = "Write Review";
	container.append(button);
	button.addEventListener("click", e => {
		REVIEW.handleWriteClick(e, showId);
	});
}
REVIEW.handleEditClick = function reviewHandleEditClick(e, showId){
	e.stopPropagation(); //stops the modal window from closing
	let container = e.currentTarget.parentElement,
		reviewText = e.currentTarget.textContent;
	e.currentTarget.outerHTML = "";
	REVIEW.getForm(container, showId, reviewText);
}
REVIEW.handleWriteClick = function reviewHandleWriteClick(e, showId){
	e.stopPropagation(); //stops the modal window from closing
	let container = e.currentTarget.parentElement;
	e.currentTarget.outerHTML = "";
	REVIEW.getForm(container, showId);
}
REVIEW.getForm = function reviewGetForm(container, showId, reviewText){
	let textarea = document.createElement("textarea"),
		button = document.createElement("button");
	if (reviewText) textarea.value = reviewText;
	container.appendChild(textarea);
	textarea.focus();
	button.textContent = "Save Review";
	container.appendChild(button);
	button.addEventListener("click", e => {
		REVIEW.handleSaveClick(e, showId);
	});
}
REVIEW.handleSaveClick = function reviewHandleSaveClick(e, showId){
	e.stopPropagation(); //stops the modal window from closing
	let review = e.target.previousElementSibling.value,
		container = e.target.parentElement;
	e.target.previousElementSibling.outerHTML = "";
	e.target.outerHTML = "";
	USER.reviews["_" + showId] = review;
	USER.update(false);
	REVIEW.get(container, showId);
}


const MODAL = {};
MODAL.window = null;
MODAL.container = null;
MODAL.init = function modalInit(){
	MODAL.window = document.querySelector("aside");
	MODAL.window.addEventListener("click", MODAL.hide);
	MODAL.container = MODAL.window.querySelector("section");
}
MODAL.getContainer = function modalGetContainer(){
	MODAL.container.innerHTML = "";
	return MODAL.container;
}
MODAL.show = function modalShow(){
	MODAL.window.classList.add("modal");
}
MODAL.hide = function modalHide(){
	MODAL.window.classList.remove("modal");
}


const TRASH = {};
TRASH.handleDragover = function trashHandleDragover(e){
	e.currentTarget.classList.add("dropping");
}
TRASH.handleDragleave = function trashHandleDragleave(e){
	e.currentTarget.classList.remove("dropping");
}


const DRAG = {};
DRAG.element = null;
DRAG.init = function dragInit(){
	DRAG.addDraggableEvents(document.querySelectorAll("li"));
	DRAG.addDroppableEvents(document.querySelectorAll("ul, #addList, #trash"));
}
DRAG.addDraggableEvents = function dragAddDraggableEvents(elements){
	elements.forEach(el => {
		el.addEventListener("dragstart", DRAG.handleDragstart);
		el.addEventListener("dragenter", DRAG.handleDragenter);
		el.addEventListener("drop", DRAG.handleDrop);
	});
}
DRAG.addDroppableEvents = function dragAddDroppableEvents(elements){
	//if single element given as argument, put it in an array
	if (typeof elements[Symbol.iterator] !== "function") elements = [elements];
	//iterate through array or nodeList
	elements.forEach(el => {
		el.addEventListener("dragover", DRAG.handleDragover);
		el.addEventListener("dragleave", DRAG.handleDragleave);
		el.addEventListener("drop", DRAG.handleDrop);
	});
}
DRAG.handleDragstart = function dragHandleDragstart(e){
	e.dataTransfer.effectAllowed = "move";
	e.dataTransfer.setData("text/plain", null);
	DRAG.element = e.currentTarget;
}
DRAG.handleDragenter = function dragHandleDragenter(e){
	e.preventDefault();
	if (DRAG.isBefore(e.currentTarget, DRAG.element)){
		e.currentTarget.parentElement.insertBefore(DRAG.element, e.currentTarget);
	}
	else {
		e.currentTarget.parentElement.insertBefore(DRAG.element, e.currentTarget.nextElementSibling);
	}
}
DRAG.handleDragover = function dragHandleDragover(e){
	e.preventDefault();
	e.dataTransfer.effectAllowed = "move";
	//special highlighting?
	if (e.currentTarget.id === "trash") TRASH.handleDragover(e);
	else LIST.handleDragover(e);
}
DRAG.handleDragleave = function dragHandleDragleave(e){
	//special highlighting?
	if (e.currentTarget.id === "trash") TRASH.handleDragleave(e);
	else LIST.handleDragleave(e);
}
DRAG.handleDrop = function dragHandleDrop(e){
	e.preventDefault();
	//rearranging?
	if (e.currentTarget.tagName.toLowerCase() === "li"){
		e.stopPropagation();
		USER.update();
		return;
	}
	//trashing?
	if (e.currentTarget.id === "trash"){
		e.stopPropagation();
		DRAG.element.outerHTML = "";
		TRASH.handleDragleave(e);
		USER.update();
		return;
	}
	//creating new list?
	if (e.currentTarget.id === "addList"){
		e.stopPropagation();
		LIST.handleDragleave(e);
		LIST.handleDrop(e, DRAG.element);
		return;
	}
	//add to ul
	e.currentTarget.appendChild(DRAG.element);
	LIST.handleDragleave(e);
	USER.update();
}
DRAG.isBefore = function dragIsBefore(elemA, elemB){
	if (elemA.parentElement === elemB.parentElement){
		//both elements have the same parent
        for (let elem = elemB; elem; elem = elem.previousElementSibling){
			//return true if elemB comes before elemA
            if (elem === elemA) return true;
        }
    }
    return false;
}

/***********************************************************/
})(window, document);
  	</script>
  	<% if (user) { %>
        <script>const user = {_id:"<%= `${user.id}` %>"}; console.log(user);</script>
    <% } %>
</head>
<body>
    <header>
        <h1><img src="logo.png" alt="VÃ©ritable Critique" /></h1>
      	<nav>
          	<input type="text" id="search" placeholder="Search for TV Shows" />
            <% if (user) { %>
				<button id="profile"><img src="<%= user.pic %>" alt="<%= user.name %> Profile" /></button>
                <a href="../logout">Logout</a>
            <% } else { %>
                <a href="/auth/google">Login</a>
            <% } %>
        </nav>
  	</header>
    <main>
        <h2>Search Results</h2>
        <ul id="searchresults"></ul>
      	<% if (user && user.lists.length) { %>
          	<% user.lists.forEach(function(list) { %>
                <h2><%= list.name %></h2>
                <ul>
                  	<% list.shows.forEach(function(show) { %>
                        <li><img src="https://cdn.dribbble.com/users/702004/screenshots/2834791/material-loader.gif" alt="" data-showId="<%= show %>" /></li>
                    <% }) %>
                </ul>
            <% }) %>
        <% } %>
  	</main>
    <footer>
      	<% if (user) { %>
  			<div id="addList"></div>
            <div id="trash"></div>
        <% } %>
  	</footer>
	<aside><section></section></aside>
</body>
</html>